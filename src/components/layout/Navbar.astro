---
const enlaces = [
  { nombre: "Inicio", href: "#" },
  { nombre: "Proyectos", href: "#proyectos" },
  { nombre: "Sobre mí", href: "#sobre-mi" },
  { nombre: "Contacto", href: "#contacto" },
];
---

<nav class="w-full px-4 md:px-6 py-3 md:py-4 bg-white/80 dark:bg-gray-900/80 backdrop-blur-sm shadow-sm fixed top-0 z-50">
  <div class="max-w-7xl mx-auto flex items-center justify-between">
    <div class="text-xl font-semibold text-gray-900 dark:text-white">
      RodAlejo-Software
    </div>

    <button id="mobile-menu-button" class="md:hidden text-gray-700 dark:text-gray-200 p-2 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7" />
      </svg>
    </button>

    <div id="mobile-menu" class="hidden md:block absolute md:relative top-16 md:top-0 left-0 w-full md:w-auto bg-white dark:bg-gray-900 md:bg-transparent shadow-lg md:shadow-none rounded-b-lg md:rounded-none">
      <ul class="flex flex-col md:flex-row items-center gap-4 md:gap-6 p-4 md:p-0 text-gray-700 dark:text-gray-200 text-sm">
        {enlaces.map(link => (
          <li class="w-full md:w-auto text-center">
            <a 
              href={link.href} 
              class="block py-2 px-4 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg md:hover:bg-transparent md:dark:hover:bg-transparent hover:text-blue-500 transition-colors duration-200"
              data-nav-link
            >
              {link.nombre}
            </a>
          </li>
        ))}
        <li class="md:hidden w-full pt-2 mt-2 border-t border-gray-200 dark:border-gray-700">
          <button id="theme-toggle-mobile" class="w-full py-2 px-4 text-center cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg transition-colors hover:text-blue-500">
          </button>
        </li>
      </ul>
    </div>

    <div class="hidden md:flex items-center">
      <button id="theme-toggle" class="text-gray-700 dark:text-gray-200 p-2 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors" aria-label="Cambiar tema">
        🌙
      </button>
    </div>
  </div>
</nav>

<script>
function toggleTheme() {
  const body = document.body;
  const themeToggle = document.getElementById('theme-toggle');
  const themeToggleMobile = document.getElementById('theme-toggle-mobile');
  
  const isDark = body.classList.toggle('dark');
  const theme = isDark ? 'dark' : 'light';
  
  const icon = isDark ? '☀️' : '🌙';
  if (themeToggle) themeToggle.textContent = icon;
  if (themeToggleMobile) themeToggleMobile.textContent = `Modo ${isDark ? 'Claro' : 'Oscuro'}` + icon;
  
  localStorage.setItem('theme', theme);
  
  document.documentElement.setAttribute('data-theme', theme);
}

function initTheme() {
  const body = document.body;
  const themeToggle = document.getElementById('theme-toggle');
  const themeToggleMobile = document.getElementById('theme-toggle-mobile');
  const theme = localStorage.getItem('theme');
  const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
  
  if (theme === 'dark' || (!theme && prefersDark)) {
    body.classList.add('dark');
    if (themeToggle) themeToggle.textContent = '☀️';
    if (themeToggleMobile) themeToggleMobile.textContent = 'Modo Claro ' + '☀️';
  } else {
    body.classList.remove('dark');
    if (themeToggle) themeToggle.textContent = '🌙';
    if (themeToggleMobile) themeToggleMobile.textContent = 'Modo Oscuro ' + '🌙';
  }
  
  document.documentElement.setAttribute('data-theme', 
    body.classList.contains('dark') ? 'dark' : 'light'
  );
}

document.addEventListener('DOMContentLoaded', () => {
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  const navLinks = document.querySelectorAll('[data-nav-link]');
  const themeToggle = document.getElementById('theme-toggle');
  const themeToggleMobile = document.getElementById('theme-toggle-mobile');
  
  initTheme();
  
  if (mobileMenuButton && mobileMenu) {
    mobileMenuButton.addEventListener('click', () => {
      mobileMenu.classList.toggle('hidden');
      mobileMenuButton.setAttribute(
        'aria-expanded', 
        mobileMenu.classList.contains('hidden') ? 'false' : 'true'
      );
    });
  }
  
  navLinks.forEach(link => {
    link.addEventListener('click', () => {
      if (mobileMenu && !mobileMenu.classList.contains('hidden') && mobileMenuButton) {
        mobileMenu.classList.add('hidden');
        mobileMenuButton.setAttribute('aria-expanded', 'false');
      }
    });
  });

  if (themeToggle) {
    themeToggle.addEventListener('click', toggleTheme);
  }
  
  if (themeToggleMobile) {
    themeToggleMobile.addEventListener('click', () => {
      toggleTheme();
      if (mobileMenu) mobileMenu.classList.add('hidden');
    });
  }
  

  let lastScroll = 0;
  window.addEventListener('scroll', () => {
    const currentScroll = window.pageYOffset;
    
    if (Math.abs(currentScroll - lastScroll) < 60) return;
    
    if (mobileMenu && !mobileMenu.classList.contains('hidden') && mobileMenuButton) {
      mobileMenu.classList.add('hidden');
      mobileMenuButton.setAttribute('aria-expanded', 'false');
    }
    
    lastScroll = currentScroll;
  });
});
</script>
